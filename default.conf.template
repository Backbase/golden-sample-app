# http://nginx.org/en/docs/http/ngx_http_headers_module.html
# off disables caching
# epoch (for unix epoch) results in resource always being refetched
# max sets the date to browser max value.
map $sent_http_content_type $expires {
  default                    off;
  text/html                  epoch;
  text/css                   max;
  application/javascript     max;
  ~image/                    1h;
}

# Accept-Language header, for content negotiation
map $http_accept_language $lang {
    ~*^(\w+)-\w+.* $1;
    default ${FALLBACK_LOCALE};
}

# read bb-locale cookie to get current locale
map $http_cookie $lang_cookie {
  ~bb-locale=(?<value>[^\;]+) $value;
}

server {
  listen      ${PORT} default_server;
  listen      [::]:${PORT} default_server;

  root /html;

  # Enables or disables gzipping of responses.
  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_comp_level 6;
  gzip_buffers 16 8k;
  gzip_http_version 1.1;
  gzip_types application/javascript application/rss+xml application/vnd.ms-fontobject application/x-font application/x-font-opentype application/x-font-otf application/x-font-truetype application/x-font-ttf application/x-javascript application/xhtml+xml application/xml font/opentype font/otf font/ttf image/svg+xml image/x-icon text/css text/javascript text/plain text/xml;

  # hide the nginx version from the server header
  server_tokens off;

  # https only to the period of max-age
  add_header Strict-Transport-Security "max-age=31449600; includeSubDomains" always;
  set $csp '${CSP}';

  # serves any file with an extension that is not html
  location ~* \.(?!html)\w+$ {
    # Enables or disables adding or modifying the “Expires” and “Cache-Control” response headers
    # provided that the response code equals 200, 201, 204, 206, 301, 302, 303, 304, 307, or 308.
    expires $expires;

    # used to protect against MIME sniffing vulnerabilities.
    add_header X-Content-Type-Options "nosniff";
  }

  # serves a locale and baseHref dependent index file,
  #   prioritizing explicit locales in URL, including language only forms
  #   falling back to the value from `bb-locale` cookie when locale is not explicit in the URL
  #   falling back to Accept-Language header when locale is not explicit in the URL (language-only)
  #   falling back to ${FALLBACK_LOCALE} when all of the above are not available.
  location ~* "^${BASE_HREF}(?:(\w{2})(?:-(\w{2}))?/?)?" {
      try_files $uri /$1-$2/index.html /$1/index.html /$lang_cookie/index.html /$lang/index.html /index.html =404;

      # no-cache response may be stored by any cache, even if the response is normally non-cacheable.
      #   However, the stored response MUST always go through validation with the origin server first before using it
      # no-store The response may not be stored in any cache.
      # max-age The maximum amount of seconds a resource is considered fresh.
      #   Unlike Expires, this directive is relative to the time of the request.
      # must-revalidate Indicates that once a resource becomes stale,
      #   caches must not use their stale copy without successful validation on the origin server.
      add_header Cache-Control "no-cache, no-store, max-age=0, must-revalidate,  proxy-revalidate";
      # used to protect against MIME sniffing vulnerabilities.
      add_header X-Content-Type-Options "nosniff";
      # allows the current page to be displayed in a frame on another page
      # but only within the current domain
      add_header X-Frame-Options "sameorigin";
      # enable the cross-site scripting (XSS) filter
      add_header X-XSS-Protection "1; mode=block";
      # siable to sent any referrer information along with requests
      add_header Referrer-Policy 'no-referrer';

      add_header X-Locale "$lang";

      # configure CSP
      add_header Content-Security-Policy-Report-Only "default-src 'self'; script-src 'self'; media-src 'self'; connect-src 'self' ${API_ROOT} ${AUTH_URL}; img-src 'self'; style-src 'self'; base-uri 'self';" always;
      add_header Content-Security-Policy $csp always;

      # enable warn level logs
      error_log log_file warn;
  }
}
