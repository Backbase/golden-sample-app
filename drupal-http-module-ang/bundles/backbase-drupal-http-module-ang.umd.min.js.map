{"version":3,"sources":["../../../../variables.ts","../../../../configuration.ts","../../../../api.module.ts","../../../../encoder.ts","../../../../api/node.service.ts","../../../../api/node.service.mocks.ts"],"names":["CMS_BASE_PATH","InjectionToken","CMSConfiguration","configurationParameters","_this","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","prototype","selectHeaderContentType","contentTypes","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","CMSApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","NgModule","args","imports","declarations","exports","decorators","Optional","SkipSelf","HttpClient","DataModulesManager","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","NodeHttpService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","entityNodeGET","requestParameters","observe","reportProgress","options","_format","_node","queryParameters","HttpParams","credential","set","httpHeaderAcceptSelected","httpHeaderAccept","responseType","startsWith","get","String","params","entityNodeGETUrl","queryString","toString","Injectable","providedIn","Inject","NodeHttpServiceEntityNodeGETMocksProvider","createMocks","urlPattern","method","responses","NodeHttpServiceMocksProvider","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const CMS_BASE_PATH = new InjectionToken<string>('CMS_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CMSConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CMSConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CMSConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default csrf_token credential\n        if (!this.credentials['csrf_token']) {\n            this.credentials['csrf_token'] = () => {\n                return this.apiKeys['csrf_token'] || this.apiKeys['X-CSRF-Token'];\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CMSConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CMSConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CMSConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CMSConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CMSApiModule {\n    public static forRoot(configurationFactory: () => CMSConfiguration): ModuleWithProviders<CMSApiModule> {\n        return {\n            ngModule: CMSApiModule,\n            providers: [ { provide: CMSConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CMSApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CMSConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CMSApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * test - REST API\n * The REST API provide by the core REST module.\n *\n * The version of the OpenAPI document: Versioning not supported\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\nimport { InlineResponse400 } from '../model/models';\nimport { InlineResponse500 } from '../model/models';\nimport { Node } from '../model/models';\n\nimport { CMS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CMSConfiguration }                                     from '../configuration';\n\n\nexport interface EntityNodeGETRequestParams {\n    /** Request format */\n    [\"format\"]: 'hal_json' | 'json';\n    /** The nid,id, of the node. */\n    [\"node\"]: string;\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NodeHttpService {\n\n    protected basePath = '';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CMSConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CMS_BASE_PATH) basePath: string, @Optional() configuration: CMSConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get a Content\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/hal+json'}): Observable<Node>;\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/hal+json'}): Observable<HttpResponse<Node>>;\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/hal+json'}): Observable<HttpEvent<Node>>;\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<Node>;\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<Node>>;\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<Node>>;\n    public entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/hal+json' | 'application/json'}): Observable<any> {\n        const _format = requestParameters[\"format\"];\n        if (_format === null || _format === undefined) {\n            throw new Error('Required parameter format was null or undefined when calling entityNodeGET.');\n        }\n        const _node = requestParameters[\"node\"];\n        if (_node === null || _node === undefined) {\n            throw new Error('Required parameter node was null or undefined when calling entityNodeGET.');\n        }\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_format !== undefined && _format !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_format, '_format');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let credential: string | undefined;\n        // authentication (csrf_token) required\n        credential = this.configuration.lookupCredential('csrf_token');\n        if (credential) {\n            headers = headers.set('X-CSRF-Token', credential);\n        }\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/hal+json',\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<Node>(`${this.configuration.basePath}/node/${encodeURIComponent(String(_node))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public entityNodeGETUrl(requestParameters: EntityNodeGETRequestParams): string {\n        const _format = requestParameters[\"format\"];\n        if (_format === null || _format === undefined) {\n            throw new Error('Required parameter format was null or undefined when calling entityNodeGET.');\n        }\n        const _node = requestParameters[\"node\"];\n        if (_node === null || _node === undefined) {\n            throw new Error('Required parameter node was null or undefined when calling entityNodeGET.');\n        }\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_format !== undefined && _format !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_format, '_format');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/node/${encodeURIComponent(String(_node))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /node/{node} URL pattern\n*/\nexport const NodeHttpServiceEntityNodeGETMocksProvider: Provider = createMocks([{\n        urlPattern: \"/node/{node}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n\nexport const NodeHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/node/{node}\",\n        method: \"GET\",\n        responses: [\n\n\n\n    ]\n},\n]\n);\n\n\n"]}