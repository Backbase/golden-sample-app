{"version":3,"file":"node.service.d.ts","sources":["node.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA","sourcesContent":["/**\n * test - REST API\n * The REST API provide by the core REST module.\n *\n * The version of the OpenAPI document: Versioning not supported\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Node } from '../model/models';\nimport { CMSConfiguration } from '../configuration';\nexport interface EntityNodeGETRequestParams {\n    /** Request format */\n    [\"format\"]: 'hal_json' | 'json';\n    /** The nid,id, of the node. */\n    [\"node\"]: string;\n}\nexport declare class NodeHttpService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: CMSConfiguration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: CMSConfiguration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * Get a Content\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/hal+json';\n    }): Observable<Node>;\n    entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/hal+json';\n    }): Observable<HttpResponse<Node>>;\n    entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/hal+json';\n    }): Observable<HttpEvent<Node>>;\n    entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<Node>;\n    entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<Node>>;\n    entityNodeGET(requestParameters: EntityNodeGETRequestParams, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<Node>>;\n    entityNodeGETUrl(requestParameters: EntityNodeGETRequestParams): string;\n}\n"]}