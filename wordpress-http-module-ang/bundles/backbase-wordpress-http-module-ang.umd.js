(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@backbase/foundation-ang/data-http')) :
    typeof define === 'function' && define.amd ? define('@backbase/wordpress-http-module-ang', ['exports', '@angular/core', '@angular/common/http', '@backbase/foundation-ang/data-http'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global.backbase = global.backbase || {}, global.backbase["wordpress-http-module-ang"] = {}), global.ng.core, global.ng.common.http, global.dataHttp));
})(this, (function (exports, i0, i1, dataHttp) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    exports.CommonPostPage = void 0;
    (function (CommonPostPage) {
        CommonPostPage.StatusEnum = {
            Publish: 'publish',
            Future: 'future',
            Draft: 'draft',
            Pending: 'pending',
            Private: 'private'
        };
        CommonPostPage.CommentStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        CommonPostPage.PingStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
    })(exports.CommonPostPage || (exports.CommonPostPage = {}));

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    exports.Media = void 0;
    (function (Media) {
        Media.StatusEnum = {
            Publish: 'publish',
            Future: 'future',
            Draft: 'draft',
            Pending: 'pending',
            Private: 'private'
        };
        Media.CommentStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        Media.PingStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        Media.MediaTypeEnum = {
            Image: 'image',
            File: 'file'
        };
    })(exports.Media || (exports.Media = {}));

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    exports.Page = void 0;
    (function (Page) {
        Page.StatusEnum = {
            Publish: 'publish',
            Future: 'future',
            Draft: 'draft',
            Pending: 'pending',
            Private: 'private'
        };
        Page.CommentStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        Page.PingStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
    })(exports.Page || (exports.Page = {}));

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    exports.Post = void 0;
    (function (Post) {
        Post.StatusEnum = {
            Publish: 'publish',
            Future: 'future',
            Draft: 'draft',
            Pending: 'pending',
            Private: 'private'
        };
        Post.CommentStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        Post.PingStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        Post.FormatEnum = {
            Standard: 'standard',
            Aside: 'aside',
            Chat: 'chat',
            Gallery: 'gallery',
            Link: 'link',
            Image: 'image',
            Quote: 'quote',
            Status: 'status',
            Video: 'video',
            Audio: 'audio'
        };
    })(exports.Post || (exports.Post = {}));

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    exports.PostAllOf = void 0;
    (function (PostAllOf) {
        PostAllOf.StatusEnum = {
            Publish: 'publish',
            Future: 'future',
            Draft: 'draft',
            Pending: 'pending',
            Private: 'private'
        };
        PostAllOf.CommentStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
        PostAllOf.PingStatusEnum = {
            Open: 'open',
            Closed: 'closed'
        };
    })(exports.PostAllOf || (exports.PostAllOf = {}));

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    exports.PostAllOf1 = void 0;
    (function (PostAllOf1) {
        PostAllOf1.FormatEnum = {
            Standard: 'standard',
            Aside: 'aside',
            Chat: 'chat',
            Gallery: 'gallery',
            Link: 'link',
            Image: 'image',
            Quote: 'quote',
            Status: 'status',
            Video: 'video',
            Audio: 'audio'
        };
    })(exports.PostAllOf1 || (exports.PostAllOf1 = {}));

    var CMS_BASE_PATH = new i0.InjectionToken('CMS_BASE_PATH');
    var COLLECTION_FORMATS = {
        'csv': ',',
        'tsv': '   ',
        'ssv': ' ',
        'pipes': '|'
    };

    var CMSConfiguration = /** @class */ (function () {
        function CMSConfiguration(configurationParameters) {
            var _this = this;
            if (configurationParameters === void 0) { configurationParameters = {}; }
            this.apiKeys = configurationParameters.apiKeys;
            this.username = configurationParameters.username;
            this.password = configurationParameters.password;
            this.accessToken = configurationParameters.accessToken;
            this.basePath = configurationParameters.basePath;
            this.withCredentials = configurationParameters.withCredentials;
            this.encoder = configurationParameters.encoder;
            if (configurationParameters.credentials) {
                this.credentials = configurationParameters.credentials;
            }
            else {
                this.credentials = {};
            }
            // init default oauth credential
            if (!this.credentials['oauth']) {
                this.credentials['oauth'] = function () {
                    return typeof _this.accessToken === 'function'
                        ? _this.accessToken()
                        : _this.accessToken;
                };
            }
        }
        /**
         * Select the correct content-type to use for a request.
         * Uses {@link CMSConfiguration#isJsonMime} to determine the correct content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param contentTypes - the array of content types that are available for selection
         * @returns the selected content-type or <code>undefined</code> if no selection could be made.
         */
        CMSConfiguration.prototype.selectHeaderContentType = function (contentTypes) {
            var _this = this;
            if (contentTypes.length === 0) {
                return undefined;
            }
            var type = contentTypes.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return contentTypes[0];
            }
            return type;
        };
        /**
         * Select the correct accept content-type to use for a request.
         * Uses {@link CMSConfiguration#isJsonMime} to determine the correct accept content-type.
         * If no content type is found return the first found type if the contentTypes is not empty
         * @param accepts - the array of content types that are available for selection.
         * @returns the selected content-type or <code>undefined</code> if no selection could be made.
         */
        CMSConfiguration.prototype.selectHeaderAccept = function (accepts) {
            var _this = this;
            if (accepts.length === 0) {
                return undefined;
            }
            var type = accepts.find(function (x) { return _this.isJsonMime(x); });
            if (type === undefined) {
                return accepts[0];
            }
            return type;
        };
        /**
         * Check if the given MIME is a JSON MIME.
         * JSON MIME examples:
         *   application/json
         *   application/json; charset=UTF8
         *   APPLICATION/JSON
         *   application/vnd.company+json
         * @param mime - MIME (Multipurpose Internet Mail Extensions)
         * @return True if the given MIME is JSON, false otherwise.
         */
        CMSConfiguration.prototype.isJsonMime = function (mime) {
            var jsonMime = new RegExp('^(application\/json|[^;/ \t]+\/[^;/ \t]+[+]json)[ \t]*(;.*)?$', 'i');
            return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');
        };
        CMSConfiguration.prototype.lookupCredential = function (key) {
            var value = this.credentials[key];
            return typeof value === 'function'
                ? value()
                : value;
        };
        return CMSConfiguration;
    }());
    var CONFIG_TOKEN = new i0.InjectionToken('api-data-module CMSConfiguration');

    var CMSApiModule = /** @class */ (function () {
        function CMSApiModule(parentModule, http, dataModulesManager, config) {
            if (parentModule) {
                throw new Error('CMSApiModule is already loaded. Import in your base AppModule only.');
            }
            if (!http) {
                throw new Error('You need to import the HttpClientModule in your AppModule! \n' +
                    'See also https://github.com/angular/angular/issues/20575');
            }
            if (dataModulesManager) {
                dataModulesManager.setModuleConfig(CONFIG_TOKEN, {
                    apiRoot: '',
                    servicePath: config.basePath || '',
                    headers: {},
                });
            }
        }
        CMSApiModule.forRoot = function (configurationFactory) {
            return {
                ngModule: CMSApiModule,
                providers: [{ provide: CMSConfiguration, useFactory: configurationFactory }]
            };
        };
        return CMSApiModule;
    }());
    CMSApiModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [],
                    declarations: [],
                    exports: [],
                    providers: []
                },] }
    ];
    CMSApiModule.ctorParameters = function () { return [
        { type: CMSApiModule, decorators: [{ type: i0.Optional }, { type: i0.SkipSelf }] },
        { type: i1.HttpClient, decorators: [{ type: i0.Optional }] },
        { type: dataHttp.DataModulesManager, decorators: [{ type: i0.Optional }] },
        { type: CMSConfiguration }
    ]; };

    /**
     * Custom HttpParameterCodec
     * Workaround for https://github.com/angular/angular/issues/18261
     */
    var CustomHttpParameterCodec = /** @class */ (function () {
        function CustomHttpParameterCodec() {
        }
        CustomHttpParameterCodec.prototype.encodeKey = function (k) {
            return encodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.encodeValue = function (v) {
            return encodeURIComponent(v);
        };
        CustomHttpParameterCodec.prototype.decodeKey = function (k) {
            return decodeURIComponent(k);
        };
        CustomHttpParameterCodec.prototype.decodeValue = function (v) {
            return decodeURIComponent(v);
        };
        return CustomHttpParameterCodec;
    }());

    /**
     * Wordpress v2 API
     * Wordpress v2 API
     *
     * The version of the OpenAPI document: 0.1.0
     *
     *
     * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
     * https://github.com/Backbase/backbase-openapi-tools
     * Do not edit the class manually.
     */
    var DefaultHttpService = /** @class */ (function () {
        function DefaultHttpService(httpClient, basePath, configuration) {
            this.httpClient = httpClient;
            this.basePath = '/wp-json/wp/v2';
            this.defaultHeaders = new i1.HttpHeaders();
            this.configuration = new CMSConfiguration();
            if (configuration) {
                this.configuration = configuration;
            }
            if (typeof this.configuration.basePath !== 'string') {
                if (typeof basePath !== 'string') {
                    basePath = this.basePath;
                }
                this.configuration.basePath = basePath;
            }
            this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
        }
        DefaultHttpService.prototype.addToHttpParams = function (httpParams, value, key) {
            if (typeof value === "object" && value instanceof Date === false) {
                httpParams = this.addToHttpParamsRecursive(httpParams, value);
            }
            else {
                httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
            }
            return httpParams;
        };
        DefaultHttpService.prototype.addToHttpParamsRecursive = function (httpParams, value, key) {
            var _this = this;
            if (value == null) {
                return httpParams;
            }
            if (typeof value === "object") {
                if (Array.isArray(value)) {
                    value.forEach(function (elem) { return httpParams = _this.addToHttpParamsRecursive(httpParams, elem, key); });
                }
                else if (value instanceof Date) {
                    if (key != null) {
                        httpParams = httpParams.append(key, value.toISOString().substr(0, 10));
                    }
                    else {
                        throw Error("key may not be null if value is Date");
                    }
                }
                else {
                    Object.keys(value).forEach(function (k) { return httpParams = _this.addToHttpParamsRecursive(httpParams, value[k], key != null ? key + "." + k : k); });
                }
            }
            else if (key != null) {
                httpParams = httpParams.append(key, value);
            }
            else {
                throw Error("key may not be null if value is not object or array");
            }
            return httpParams;
        };
        DefaultHttpService.prototype.mediaIdGet = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling mediaIdGet.');
            }
            var _context = requestParameters["context"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_context !== undefined && _context !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _context, 'context');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                // to determine the Accept header
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/media/" + encodeURIComponent(String(_id)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DefaultHttpService.prototype.mediaIdGetUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling mediaIdGet.');
            }
            var _context = requestParameters["context"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_context !== undefined && _context !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _context, 'context');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/media/" + encodeURIComponent(String(_id)) + (queryString ? "?" + queryString : '');
        };
        DefaultHttpService.prototype.pagesIdGet = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling pagesIdGet.');
            }
            var _context = requestParameters["context"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_context !== undefined && _context !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _context, 'context');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                // to determine the Accept header
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/pages/" + encodeURIComponent(String(_id)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DefaultHttpService.prototype.pagesIdGetUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling pagesIdGet.');
            }
            var _context = requestParameters["context"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_context !== undefined && _context !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _context, 'context');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/pages/" + encodeURIComponent(String(_id)) + (queryString ? "?" + queryString : '');
        };
        DefaultHttpService.prototype.postsIdGet = function (requestParameters, observe, reportProgress, options) {
            if (observe === void 0) { observe = 'body'; }
            if (reportProgress === void 0) { reportProgress = false; }
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postsIdGet.');
            }
            var _context = requestParameters["context"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_context !== undefined && _context !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _context, 'context');
            }
            var headers = this.defaultHeaders;
            var httpHeaderAcceptSelected = options && options.httpHeaderAccept;
            if (httpHeaderAcceptSelected === undefined) {
                // to determine the Accept header
                var httpHeaderAccepts = [
                    'application/json'
                ];
                httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
            }
            if (httpHeaderAcceptSelected !== undefined) {
                headers = headers.set('Accept', httpHeaderAcceptSelected);
            }
            var responseType = 'json';
            if (httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {
                responseType = 'text';
            }
            return this.httpClient.get(this.configuration.basePath + "/posts/" + encodeURIComponent(String(_id)), {
                params: queryParameters,
                responseType: responseType,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            });
        };
        DefaultHttpService.prototype.postsIdGetUrl = function (requestParameters) {
            var _id = requestParameters["id"];
            if (_id === null || _id === undefined) {
                throw new Error('Required parameter id was null or undefined when calling postsIdGet.');
            }
            var _context = requestParameters["context"];
            var queryParameters = new i1.HttpParams({ encoder: this.encoder });
            if (_context !== undefined && _context !== null) {
                queryParameters = this.addToHttpParams(queryParameters, _context, 'context');
            }
            var queryString = queryParameters.toString();
            return this.configuration.basePath + "/posts/" + encodeURIComponent(String(_id)) + (queryString ? "?" + queryString : '');
        };
        return DefaultHttpService;
    }());
    DefaultHttpService.ɵprov = i0__namespace.ɵɵdefineInjectable({ factory: function DefaultHttpService_Factory() { return new DefaultHttpService(i0__namespace.ɵɵinject(i1__namespace.HttpClient), i0__namespace.ɵɵinject(CMS_BASE_PATH, 8), i0__namespace.ɵɵinject(CMSConfiguration, 8)); }, token: DefaultHttpService, providedIn: "root" });
    DefaultHttpService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    DefaultHttpService.ctorParameters = function () { return [
        { type: i1.HttpClient },
        { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [CMS_BASE_PATH,] }] },
        { type: CMSConfiguration, decorators: [{ type: i0.Optional }] }
    ]; };

    /**
    * Mocks provider for /wp-json/wp/v2/media/{id} URL pattern
    */
    var DefaultHttpServiceMediaIdGetMocksProvider = dataHttp.createMocks([{
            urlPattern: "/wp-json/wp/v2/media/{id}",
            method: "GET",
            responses: []
        }]);
    /**
    * Mocks provider for /wp-json/wp/v2/pages/{id} URL pattern
    */
    var DefaultHttpServicePagesIdGetMocksProvider = dataHttp.createMocks([{
            urlPattern: "/wp-json/wp/v2/pages/{id}",
            method: "GET",
            responses: []
        }]);
    /**
    * Mocks provider for /wp-json/wp/v2/posts/{id} URL pattern
    */
    var DefaultHttpServicePostsIdGetMocksProvider = dataHttp.createMocks([{
            urlPattern: "/wp-json/wp/v2/posts/{id}",
            method: "GET",
            responses: []
        }]);
    var DefaultHttpServiceMocksProvider = dataHttp.createMocks([
        {
            urlPattern: "/wp-json/wp/v2/media/{id}",
            method: "GET",
            responses: []
        },
        {
            urlPattern: "/wp-json/wp/v2/pages/{id}",
            method: "GET",
            responses: []
        },
        {
            urlPattern: "/wp-json/wp/v2/posts/{id}",
            method: "GET",
            responses: []
        },
    ]);

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CMSApiModule = CMSApiModule;
    exports.CMSConfiguration = CMSConfiguration;
    exports.CMS_BASE_PATH = CMS_BASE_PATH;
    exports.COLLECTION_FORMATS = COLLECTION_FORMATS;
    exports.CONFIG_TOKEN = CONFIG_TOKEN;
    exports.DefaultHttpService = DefaultHttpService;
    exports.DefaultHttpServiceMediaIdGetMocksProvider = DefaultHttpServiceMediaIdGetMocksProvider;
    exports.DefaultHttpServiceMocksProvider = DefaultHttpServiceMocksProvider;
    exports.DefaultHttpServicePagesIdGetMocksProvider = DefaultHttpServicePagesIdGetMocksProvider;
    exports.DefaultHttpServicePostsIdGetMocksProvider = DefaultHttpServicePostsIdGetMocksProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=backbase-wordpress-http-module-ang.umd.js.map
