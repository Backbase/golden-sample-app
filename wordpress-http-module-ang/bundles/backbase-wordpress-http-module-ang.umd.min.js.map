{"version":3,"sources":["../../../../model/commonPostPage.ts","../../../../model/media.ts","../../../../model/page.ts","../../../../model/post.ts","../../../../model/postAllOf.ts","../../../../model/postAllOf1.ts","../../../../variables.ts","../../../../configuration.ts","../../../../api.module.ts","../../../../encoder.ts","../../../../api/default.service.ts","../../../../api/default.service.mocks.ts"],"names":["CommonPostPage","Media","Page","Post","PostAllOf","StatusEnum","Publish","Future","Draft","Pending","Private","CommentStatusEnum","Open","Closed","PingStatusEnum","MediaTypeEnum","Image","File","FormatEnum","Standard","Aside","Chat","Gallery","Link","Quote","Status","Video","Audio","PostAllOf1","CMS_BASE_PATH","InjectionToken","CMSConfiguration","configurationParameters","_this","this","apiKeys","username","password","accessToken","basePath","withCredentials","encoder","credentials","prototype","selectHeaderContentType","contentTypes","length","type","find","x","isJsonMime","undefined","selectHeaderAccept","accepts","mime","jsonMime","RegExp","test","toLowerCase","lookupCredential","key","value","CONFIG_TOKEN","CMSApiModule","parentModule","http","dataModulesManager","config","Error","setModuleConfig","apiRoot","servicePath","headers","forRoot","configurationFactory","ngModule","providers","provide","useFactory","NgModule","args","imports","declarations","exports","decorators","Optional","SkipSelf","HttpClient","DataModulesManager","CustomHttpParameterCodec","encodeKey","k","encodeURIComponent","encodeValue","v","decodeKey","decodeURIComponent","decodeValue","DefaultHttpService","httpClient","configuration","defaultHeaders","HttpHeaders","addToHttpParams","httpParams","Date","addToHttpParamsRecursive","Array","isArray","forEach","elem","append","toISOString","substr","Object","keys","mediaIdGet","requestParameters","observe","reportProgress","options","_id","_context","queryParameters","HttpParams","httpHeaderAcceptSelected","httpHeaderAccept","set","responseType","startsWith","get","String","params","mediaIdGetUrl","queryString","toString","pagesIdGet","pagesIdGetUrl","postsIdGet","postsIdGetUrl","Injectable","providedIn","Inject","DefaultHttpServiceMediaIdGetMocksProvider","createMocks","urlPattern","method","responses","DefaultHttpServicePagesIdGetMocksProvider","DefaultHttpServicePostsIdGetMocksProvider","DefaultHttpServiceMocksProvider","csv","tsv","ssv","pipes"],"mappings":"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","sourcesContent":["/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface CommonPostPage { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: CommonPostPage.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: CommonPostPage.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: CommonPostPage.PingStatusEnum;\n}\nexport namespace CommonPostPage {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n}\n\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface Media { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: Media.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: Media.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: Media.PingStatusEnum;\n    /**\n     * Alternative text to display when resource is not displayed\n     */\n    [\"alt_text\"]?: string;\n    /**\n     * The caption for the resource.\n     */\n    [\"caption\"]?: string;\n    /**\n     * The description for the resource.\n     */\n    [\"description\"]?: string;\n    /**\n     * Type of resource.\n     */\n    [\"media_type\"]?: Media.MediaTypeEnum;\n    /**\n     * Mime type of resource.\n     */\n    [\"mime_type\"]?: string;\n    /**\n     * Details about the resource file, specific to its type.\n     */\n    [\"media_details\"]?: string;\n    /**\n     * The id for the associated post of the resource.\n     */\n    [\"post\"]?: string;\n    /**\n     * URL to the original resource file.\n     */\n    [\"source_url\"]?: string;\n}\nexport namespace Media {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n    export type MediaTypeEnum = 'image' | 'file';\n    export const MediaTypeEnum = {\n        Image: 'image' as MediaTypeEnum,\n        File: 'file' as MediaTypeEnum\n    };\n}\n\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { PostAllOf } from './postAllOf';\nimport { PageAllOf } from './pageAllOf';\n\n\nexport interface Page { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: Page.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: Page.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: Page.PingStatusEnum;\n    /**\n     * The id for the parent of the object.\n     */\n    [\"parent\"]?: number;\n    /**\n     * The order of the object in relation to other object of its type.\n     */\n    [\"menu_order\"]?: number;\n    /**\n     * The theme file to use to display the object.\n     */\n    [\"template\"]?: number;\n}\nexport namespace Page {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n}\n\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { PostAllOf1 } from './postAllOf1';\nimport { PostAllOf } from './postAllOf';\n\n\nexport interface Post { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: Post.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: Post.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: Post.PingStatusEnum;\n    /**\n     * The format for the object.\n     */\n    [\"format\"]?: Post.FormatEnum;\n    /**\n     * Whether or not the object should be treated as sticky.\n     */\n    [\"sticky\"]?: boolean;\n    /**\n     * The terms assigned to the object in the category taxonomy.\n     */\n    [\"categories\"]?: Array<string>;\n    /**\n     * he terms assigned to the object in the post_tag taxonomy.\n     */\n    [\"tags\"]?: Array<string>;\n}\nexport namespace Post {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n    export type FormatEnum = 'standard' | 'aside' | 'chat' | 'gallery' | 'link' | 'image' | 'quote' | 'status' | 'video' | 'audio';\n    export const FormatEnum = {\n        Standard: 'standard' as FormatEnum,\n        Aside: 'aside' as FormatEnum,\n        Chat: 'chat' as FormatEnum,\n        Gallery: 'gallery' as FormatEnum,\n        Link: 'link' as FormatEnum,\n        Image: 'image' as FormatEnum,\n        Quote: 'quote' as FormatEnum,\n        Status: 'status' as FormatEnum,\n        Video: 'video' as FormatEnum,\n        Audio: 'audio' as FormatEnum\n    };\n}\n\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface PostAllOf { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: PostAllOf.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: PostAllOf.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: PostAllOf.PingStatusEnum;\n}\nexport namespace PostAllOf {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n}\n\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface PostAllOf1 { \n    /**\n     * The format for the object.\n     */\n    [\"format\"]?: PostAllOf1.FormatEnum;\n    /**\n     * Whether or not the object should be treated as sticky.\n     */\n    [\"sticky\"]?: boolean;\n    /**\n     * The terms assigned to the object in the category taxonomy.\n     */\n    [\"categories\"]?: Array<string>;\n    /**\n     * he terms assigned to the object in the post_tag taxonomy.\n     */\n    [\"tags\"]?: Array<string>;\n}\nexport namespace PostAllOf1 {\n    export type FormatEnum = 'standard' | 'aside' | 'chat' | 'gallery' | 'link' | 'image' | 'quote' | 'status' | 'video' | 'audio';\n    export const FormatEnum = {\n        Standard: 'standard' as FormatEnum,\n        Aside: 'aside' as FormatEnum,\n        Chat: 'chat' as FormatEnum,\n        Gallery: 'gallery' as FormatEnum,\n        Link: 'link' as FormatEnum,\n        Image: 'image' as FormatEnum,\n        Quote: 'quote' as FormatEnum,\n        Status: 'status' as FormatEnum,\n        Video: 'video' as FormatEnum,\n        Audio: 'audio' as FormatEnum\n    };\n}\n\n\n","import { InjectionToken } from '@angular/core';\n\nexport const CMS_BASE_PATH = new InjectionToken<string>('CMS_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CMSConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CMSConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CMSConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default oauth credential\n        if (!this.credentials['oauth']) {\n            this.credentials['oauth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CMSConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CMSConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CMSConfiguration');\n\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CMSConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CMSApiModule {\n    public static forRoot(configurationFactory: () => CMSConfiguration): ModuleWithProviders<CMSApiModule> {\n        return {\n            ngModule: CMSApiModule,\n            providers: [ { provide: CMSConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CMSApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CMSConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CMSApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { CMS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CMSConfiguration }                                     from '../configuration';\n\n\nexport interface MediaIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\n\nexport interface PagesIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\n\nexport interface PostsIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DefaultHttpService {\n\n    protected basePath = '/wp-json/wp/v2';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CMSConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CMS_BASE_PATH) basePath: string, @Optional() configuration: CMSConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get Single Media\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<object>;\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<object>>;\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<object>>;\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling mediaIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/media/${encodeURIComponent(String(_id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public mediaIdGetUrl(requestParameters: MediaIdGetRequestParams): string {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling mediaIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/media/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get Single Page\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<object>;\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<object>>;\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<object>>;\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling pagesIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/pages/${encodeURIComponent(String(_id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public pagesIdGetUrl(requestParameters: PagesIdGetRequestParams): string {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling pagesIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/pages/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get Single Post\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<object>;\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<object>>;\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<object>>;\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postsIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/posts/${encodeURIComponent(String(_id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postsIdGetUrl(requestParameters: PostsIdGetRequestParams): string {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postsIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/posts/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /wp-json/wp/v2/media/{id} URL pattern\n*/\nexport const DefaultHttpServiceMediaIdGetMocksProvider: Provider = createMocks([{\n        urlPattern: \"/wp-json/wp/v2/media/{id}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n/**\n* Mocks provider for /wp-json/wp/v2/pages/{id} URL pattern\n*/\nexport const DefaultHttpServicePagesIdGetMocksProvider: Provider = createMocks([{\n        urlPattern: \"/wp-json/wp/v2/pages/{id}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n/**\n* Mocks provider for /wp-json/wp/v2/posts/{id} URL pattern\n*/\nexport const DefaultHttpServicePostsIdGetMocksProvider: Provider = createMocks([{\n        urlPattern: \"/wp-json/wp/v2/posts/{id}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n\nexport const DefaultHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/wp-json/wp/v2/media/{id}\",\n        method: \"GET\",\n        responses: [\n\n    ]\n},\n    {\n        urlPattern: \"/wp-json/wp/v2/pages/{id}\",\n        method: \"GET\",\n        responses: [\n\n    ]\n},\n    {\n        urlPattern: \"/wp-json/wp/v2/posts/{id}\",\n        method: \"GET\",\n        responses: [\n\n    ]\n},\n]\n);\n\n\n"]}