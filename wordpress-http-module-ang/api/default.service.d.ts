/**
 * Wordpress v2 API
 * Wordpress v2 API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */
import { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';
import { Observable } from 'rxjs';
import { CMSConfiguration } from '../configuration';
import * as ɵngcc0 from '@angular/core';
export interface MediaIdGetRequestParams {
    /** Id of object */
    ["id"]: string;
    /** Scope under which the request is made; determines fields present in response. */
    ["context"]?: 'view' | 'embed' | 'edit';
}
export interface PagesIdGetRequestParams {
    /** Id of object */
    ["id"]: string;
    /** Scope under which the request is made; determines fields present in response. */
    ["context"]?: 'view' | 'embed' | 'edit';
}
export interface PostsIdGetRequestParams {
    /** Id of object */
    ["id"]: string;
    /** Scope under which the request is made; determines fields present in response. */
    ["context"]?: 'view' | 'embed' | 'edit';
}
export declare class DefaultHttpService {
    protected httpClient: HttpClient;
    protected basePath: string;
    defaultHeaders: HttpHeaders;
    configuration: CMSConfiguration;
    encoder: HttpParameterCodec;
    constructor(httpClient: HttpClient, basePath: string, configuration: CMSConfiguration);
    private addToHttpParams;
    private addToHttpParamsRecursive;
    /**
     * Get Single Media
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<object>;
    mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<object>>;
    mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<object>>;
    mediaIdGetUrl(requestParameters: MediaIdGetRequestParams): string;
    /**
     * Get Single Page
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<object>;
    pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<object>>;
    pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<object>>;
    pagesIdGetUrl(requestParameters: PagesIdGetRequestParams): string;
    /**
     * Get Single Post
     * @param requestParameters
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<object>;
    postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpResponse<object>>;
    postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {
        httpHeaderAccept?: 'application/json';
    }): Observable<HttpEvent<object>>;
    postsIdGetUrl(requestParameters: PostsIdGetRequestParams): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DefaultHttpService, [null, { optional: true; }, { optional: true; }]>;
}

//# sourceMappingURL=default.service.d.ts.map