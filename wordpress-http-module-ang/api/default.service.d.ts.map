{"version":3,"file":"default.service.d.ts","sources":["default.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,AACA","sourcesContent":["/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\nimport { HttpClient, HttpHeaders, HttpResponse, HttpEvent, HttpParameterCodec } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { CMSConfiguration } from '../configuration';\nexport interface MediaIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\nexport interface PagesIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\nexport interface PostsIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\nexport declare class DefaultHttpService {\n    protected httpClient: HttpClient;\n    protected basePath: string;\n    defaultHeaders: HttpHeaders;\n    configuration: CMSConfiguration;\n    encoder: HttpParameterCodec;\n    constructor(httpClient: HttpClient, basePath: string, configuration: CMSConfiguration);\n    private addToHttpParams;\n    private addToHttpParamsRecursive;\n    /**\n     * Get Single Media\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<object>;\n    mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<object>>;\n    mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<object>>;\n    mediaIdGetUrl(requestParameters: MediaIdGetRequestParams): string;\n    /**\n     * Get Single Page\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<object>;\n    pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<object>>;\n    pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<object>>;\n    pagesIdGetUrl(requestParameters: PagesIdGetRequestParams): string;\n    /**\n     * Get Single Post\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<object>;\n    postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpResponse<object>>;\n    postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {\n        httpHeaderAccept?: 'application/json';\n    }): Observable<HttpEvent<object>>;\n    postsIdGetUrl(requestParameters: PostsIdGetRequestParams): string;\n}\n"]}