{"version":3,"file":"backbase-wordpress-http-module-ang.js","sources":["../../../../model/commonPostPage.ts","../../../../model/media.ts","../../../../model/page.ts","../../../../model/pageAllOf.ts","../../../../model/post.ts","../../../../model/postAllOf.ts","../../../../model/postAllOf1.ts","../../../../variables.ts","../../../../configuration.ts","../../../../api.module.ts","../../../../encoder.ts","../../../../api/default.service.ts","../../../../api/default.service.mocks.ts","../../../../backbase-wordpress-http-module-ang.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface CommonPostPage { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: CommonPostPage.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: CommonPostPage.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: CommonPostPage.PingStatusEnum;\n}\nexport namespace CommonPostPage {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n}\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface Media { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: Media.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: Media.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: Media.PingStatusEnum;\n    /**\n     * Alternative text to display when resource is not displayed\n     */\n    [\"alt_text\"]?: string;\n    /**\n     * The caption for the resource.\n     */\n    [\"caption\"]?: string;\n    /**\n     * The description for the resource.\n     */\n    [\"description\"]?: string;\n    /**\n     * Type of resource.\n     */\n    [\"media_type\"]?: Media.MediaTypeEnum;\n    /**\n     * Mime type of resource.\n     */\n    [\"mime_type\"]?: string;\n    /**\n     * Details about the resource file, specific to its type.\n     */\n    [\"media_details\"]?: string;\n    /**\n     * The id for the associated post of the resource.\n     */\n    [\"post\"]?: string;\n    /**\n     * URL to the original resource file.\n     */\n    [\"source_url\"]?: string;\n}\nexport namespace Media {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n    export type MediaTypeEnum = 'image' | 'file';\n    export const MediaTypeEnum = {\n        Image: 'image' as MediaTypeEnum,\n        File: 'file' as MediaTypeEnum\n    };\n}\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { PostAllOf } from './postAllOf';\nimport { PageAllOf } from './pageAllOf';\n\n\nexport interface Page { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: Page.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: Page.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: Page.PingStatusEnum;\n    /**\n     * The id for the parent of the object.\n     */\n    [\"parent\"]?: number;\n    /**\n     * The order of the object in relation to other object of its type.\n     */\n    [\"menu_order\"]?: number;\n    /**\n     * The theme file to use to display the object.\n     */\n    [\"template\"]?: number;\n}\nexport namespace Page {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n}\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface PageAllOf { \n    /**\n     * The id for the parent of the object.\n     */\n    [\"parent\"]?: number;\n    /**\n     * The order of the object in relation to other object of its type.\n     */\n    [\"menu_order\"]?: number;\n    /**\n     * The theme file to use to display the object.\n     */\n    [\"template\"]?: number;\n}\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\nimport { PostAllOf1 } from './postAllOf1';\nimport { PostAllOf } from './postAllOf';\n\n\nexport interface Post { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: Post.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: Post.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: Post.PingStatusEnum;\n    /**\n     * The format for the object.\n     */\n    [\"format\"]?: Post.FormatEnum;\n    /**\n     * Whether or not the object should be treated as sticky.\n     */\n    [\"sticky\"]?: boolean;\n    /**\n     * The terms assigned to the object in the category taxonomy.\n     */\n    [\"categories\"]?: Array<string>;\n    /**\n     * he terms assigned to the object in the post_tag taxonomy.\n     */\n    [\"tags\"]?: Array<string>;\n}\nexport namespace Post {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n    export type FormatEnum = 'standard' | 'aside' | 'chat' | 'gallery' | 'link' | 'image' | 'quote' | 'status' | 'video' | 'audio';\n    export const FormatEnum = {\n        Standard: 'standard' as FormatEnum,\n        Aside: 'aside' as FormatEnum,\n        Chat: 'chat' as FormatEnum,\n        Gallery: 'gallery' as FormatEnum,\n        Link: 'link' as FormatEnum,\n        Image: 'image' as FormatEnum,\n        Quote: 'quote' as FormatEnum,\n        Status: 'status' as FormatEnum,\n        Video: 'video' as FormatEnum,\n        Audio: 'audio' as FormatEnum\n    };\n}\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface PostAllOf { \n    /**\n     * The date the object was published, in the site\\'s timezone.\n     */\n    [\"date\"]?: string;\n    /**\n     * The date the object was published, as GMT.\n     */\n    [\"date_gmt\"]?: string;\n    /**\n     * The globally unique identifier for the object.\n     */\n    [\"guid\"]?: string;\n    /**\n     * Unique identifier for the object.\n     */\n    [\"id\"]?: number;\n    /**\n     * URL to the object.\n     */\n    [\"link\"]?: string;\n    /**\n     * The date the object was last modified, in the site\\'s timezone.\n     */\n    [\"modified\"]?: string;\n    /**\n     * The date the object was last modified, as GMT.\n     */\n    [\"modified_gmt\"]?: string;\n    /**\n     * The A password to protect access to the post.\n     */\n    [\"password\"]?: string;\n    /**\n     * An alphanumeric identifier for the object unique to its type.\n     */\n    [\"slug\"]?: string;\n    /**\n     * A named status for the object.\n     */\n    [\"status\"]?: PostAllOf.StatusEnum;\n    /**\n     * Type of Post for the object.\n     */\n    [\"type\"]?: string;\n    /**\n     * The title for the object.\n     */\n    [\"title\"]?: string;\n    /**\n     * The content for the object.\n     */\n    [\"content\"]?: string;\n    /**\n     * The id for the author of the object.\n     */\n    [\"author\"]?: string;\n    /**\n     * The excerpt for the object\n     */\n    [\"excerpt\"]?: string;\n    /**\n     * The id of the featured media for the object.\n     */\n    [\"featured_media\"]?: string;\n    /**\n     * Whether or not comments are open on the object\n     */\n    [\"comment_status\"]?: PostAllOf.CommentStatusEnum;\n    /**\n     * Whether or not the object can be pinged.\n     */\n    [\"ping_status\"]?: PostAllOf.PingStatusEnum;\n}\nexport namespace PostAllOf {\n    export type StatusEnum = 'publish' | 'future' | 'draft' | 'pending' | 'private';\n    export const StatusEnum = {\n        Publish: 'publish' as StatusEnum,\n        Future: 'future' as StatusEnum,\n        Draft: 'draft' as StatusEnum,\n        Pending: 'pending' as StatusEnum,\n        Private: 'private' as StatusEnum\n    };\n    export type CommentStatusEnum = 'open' | 'closed';\n    export const CommentStatusEnum = {\n        Open: 'open' as CommentStatusEnum,\n        Closed: 'closed' as CommentStatusEnum\n    };\n    export type PingStatusEnum = 'open' | 'closed';\n    export const PingStatusEnum = {\n        Open: 'open' as PingStatusEnum,\n        Closed: 'closed' as PingStatusEnum\n    };\n}\n\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n\n\nexport interface PostAllOf1 { \n    /**\n     * The format for the object.\n     */\n    [\"format\"]?: PostAllOf1.FormatEnum;\n    /**\n     * Whether or not the object should be treated as sticky.\n     */\n    [\"sticky\"]?: boolean;\n    /**\n     * The terms assigned to the object in the category taxonomy.\n     */\n    [\"categories\"]?: Array<string>;\n    /**\n     * he terms assigned to the object in the post_tag taxonomy.\n     */\n    [\"tags\"]?: Array<string>;\n}\nexport namespace PostAllOf1 {\n    export type FormatEnum = 'standard' | 'aside' | 'chat' | 'gallery' | 'link' | 'image' | 'quote' | 'status' | 'video' | 'audio';\n    export const FormatEnum = {\n        Standard: 'standard' as FormatEnum,\n        Aside: 'aside' as FormatEnum,\n        Chat: 'chat' as FormatEnum,\n        Gallery: 'gallery' as FormatEnum,\n        Link: 'link' as FormatEnum,\n        Image: 'image' as FormatEnum,\n        Quote: 'quote' as FormatEnum,\n        Status: 'status' as FormatEnum,\n        Video: 'video' as FormatEnum,\n        Audio: 'audio' as FormatEnum\n    };\n}\n\n","import { InjectionToken } from '@angular/core';\n\nexport const CMS_BASE_PATH = new InjectionToken<string>('CMS_BASE_PATH');\nexport const COLLECTION_FORMATS = {\n    'csv': ',',\n    'tsv': '   ',\n    'ssv': ' ',\n    'pipes': '|'\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\nimport { InjectionToken } from '@angular/core';\n\nexport interface CMSConfigurationParameters {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials?: {[ key: string ]: string | (() => string | undefined)};\n}\n\nexport class CMSConfiguration {\n    apiKeys?: {[ key: string ]: string};\n    username?: string;\n    password?: string;\n    accessToken?: string | (() => string);\n    basePath?: string;\n    withCredentials?: boolean;\n    encoder?: HttpParameterCodec;\n    /**\n     * The keys are the names in the securitySchemes section of the OpenAPI\n     * document. They should map to the value used for authentication\n     * minus any standard prefixes such as 'Basic' or 'Bearer'.\n     */\n    credentials: {[ key: string ]: string | (() => string | undefined)};\n\n    constructor(configurationParameters: CMSConfigurationParameters = {}) {\n        this.apiKeys = configurationParameters.apiKeys;\n        this.username = configurationParameters.username;\n        this.password = configurationParameters.password;\n        this.accessToken = configurationParameters.accessToken;\n        this.basePath = configurationParameters.basePath;\n        this.withCredentials = configurationParameters.withCredentials;\n        this.encoder = configurationParameters.encoder;\n        if (configurationParameters.credentials) {\n            this.credentials = configurationParameters.credentials;\n        }\n        else {\n            this.credentials = {};\n        }\n\n        // init default oauth credential\n        if (!this.credentials['oauth']) {\n            this.credentials['oauth'] = () => {\n                return typeof this.accessToken === 'function'\n                    ? this.accessToken()\n                    : this.accessToken;\n            };\n        }\n    }\n\n    /**\n     * Select the correct content-type to use for a request.\n     * Uses {@link CMSConfiguration#isJsonMime} to determine the correct content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param contentTypes - the array of content types that are available for selection\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderContentType (contentTypes: string[]): string | undefined {\n        if (contentTypes.length === 0) {\n            return undefined;\n        }\n\n        const type = contentTypes.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return contentTypes[0];\n        }\n        return type;\n    }\n\n    /**\n     * Select the correct accept content-type to use for a request.\n     * Uses {@link CMSConfiguration#isJsonMime} to determine the correct accept content-type.\n     * If no content type is found return the first found type if the contentTypes is not empty\n     * @param accepts - the array of content types that are available for selection.\n     * @returns the selected content-type or <code>undefined</code> if no selection could be made.\n     */\n    public selectHeaderAccept(accepts: string[]): string | undefined {\n        if (accepts.length === 0) {\n            return undefined;\n        }\n\n        const type = accepts.find((x: string) => this.isJsonMime(x));\n        if (type === undefined) {\n            return accepts[0];\n        }\n        return type;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n\n    public lookupCredential(key: string): string | undefined {\n        const value = this.credentials[key];\n        return typeof value === 'function'\n            ? value()\n            : value;\n    }\n}\n\nexport const CONFIG_TOKEN = new InjectionToken('api-data-module CMSConfiguration');\n","import { NgModule, ModuleWithProviders, SkipSelf, Optional } from '@angular/core';\nimport { CMSConfiguration, CONFIG_TOKEN } from './configuration';\nimport { HttpClient } from '@angular/common/http';\n\nimport { DataModulesManager } from \"@backbase/foundation-ang/data-http\";\n\n@NgModule({\n  imports:      [],\n  declarations: [],\n  exports:      [],\n  providers:    []\n})\nexport class CMSApiModule {\n    public static forRoot(configurationFactory: () => CMSConfiguration): ModuleWithProviders<CMSApiModule> {\n        return {\n            ngModule: CMSApiModule,\n            providers: [ { provide: CMSConfiguration, useFactory: configurationFactory } ]\n        };\n    }\n\n    constructor( @Optional() @SkipSelf() parentModule: CMSApiModule,\n                 @Optional() http: HttpClient,\n                 @Optional() dataModulesManager: DataModulesManager | null,\n                 config: CMSConfiguration,\n\n        ) {\n        if (parentModule) {\n            throw new Error('CMSApiModule is already loaded. Import in your base AppModule only.');\n        }\n        if (!http) {\n            throw new Error('You need to import the HttpClientModule in your AppModule! \\n' +\n            'See also https://github.com/angular/angular/issues/20575');\n        }\n\n        if (dataModulesManager) {\n            dataModulesManager.setModuleConfig(CONFIG_TOKEN, {\n                apiRoot: '',\n                servicePath: config.basePath || '',\n                headers: {},\n            });\n        }\n    }\n}\n","import { HttpParameterCodec } from '@angular/common/http';\n\n/**\n * Custom HttpParameterCodec\n * Workaround for https://github.com/angular/angular/issues/18261\n */\nexport class CustomHttpParameterCodec implements HttpParameterCodec {\n    encodeKey(k: string): string {\n        return encodeURIComponent(k);\n    }\n    encodeValue(v: string): string {\n        return encodeURIComponent(v);\n    }\n    decodeKey(k: string): string {\n        return decodeURIComponent(k);\n    }\n    decodeValue(v: string): string {\n        return decodeURIComponent(v);\n    }\n}\n","/**\n * Wordpress v2 API\n * Wordpress v2 API\n *\n * The version of the OpenAPI document: 0.1.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).\n * https://github.com/Backbase/backbase-openapi-tools\n * Do not edit the class manually.\n */\n\n/* tslint:disable:no-unused-variable member-ordering */\n\nimport { Inject, Injectable, Optional }                      from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams,\n         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';\nimport { CustomHttpParameterCodec }                          from '../encoder';\nimport { Observable }                                        from 'rxjs';\n\n\nimport { CMS_BASE_PATH, COLLECTION_FORMATS }                     from '../variables';\nimport { CMSConfiguration }                                     from '../configuration';\n\n\nexport interface MediaIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\n\nexport interface PagesIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\n\nexport interface PostsIdGetRequestParams {\n    /** Id of object */\n    [\"id\"]: string;\n    /** Scope under which the request is made; determines fields present in response. */\n    [\"context\"]?: 'view' | 'embed' | 'edit';\n}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DefaultHttpService {\n\n    protected basePath = '/wp-json/wp/v2';\n    public defaultHeaders = new HttpHeaders();\n    public configuration = new CMSConfiguration();\n    public encoder: HttpParameterCodec;\n\n    constructor(protected httpClient: HttpClient, @Optional() @Inject(CMS_BASE_PATH) basePath: string, @Optional() configuration: CMSConfiguration) {\n        if (configuration) {\n            this.configuration = configuration;\n        }\n        if (typeof this.configuration.basePath !== 'string') {\n            if (typeof basePath !== 'string') {\n                basePath = this.basePath;\n            }\n            this.configuration.basePath = basePath;\n        }\n        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();\n    }\n\n\n    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {\n        if (typeof value === \"object\" && value instanceof Date === false) {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value);\n        } else {\n            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);\n        }\n        return httpParams;\n    }\n\n    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {\n        if (value == null) {\n            return httpParams;\n        }\n\n        if (typeof value === \"object\") {\n            if (Array.isArray(value)) {\n                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));\n            } else if (value instanceof Date) {\n                if (key != null) {\n                    httpParams = httpParams.append(key,\n                        (value as Date).toISOString().substr(0, 10));\n                } else {\n                   throw Error(\"key may not be null if value is Date\");\n                }\n            } else {\n                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(\n                    httpParams, value[k], key != null ? `${key}.${k}` : k));\n            }\n        } else if (key != null) {\n            httpParams = httpParams.append(key, value);\n        } else {\n            throw Error(\"key may not be null if value is not object or array\");\n        }\n        return httpParams;\n    }\n\n    /**\n     * Get Single Media\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<object>;\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<object>>;\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<object>>;\n    public mediaIdGet(requestParameters: MediaIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling mediaIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/media/${encodeURIComponent(String(_id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public mediaIdGetUrl(requestParameters: MediaIdGetRequestParams): string {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling mediaIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/media/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get Single Page\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<object>;\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<object>>;\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<object>>;\n    public pagesIdGet(requestParameters: PagesIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling pagesIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/pages/${encodeURIComponent(String(_id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public pagesIdGetUrl(requestParameters: PagesIdGetRequestParams): string {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling pagesIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/pages/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n    /**\n     * Get Single Post\n     * @param requestParameters\n     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.\n     * @param reportProgress flag to report request and response progress.\n     */\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<object>;\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpResponse<object>>;\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json'}): Observable<HttpEvent<object>>;\n    public postsIdGet(requestParameters: PostsIdGetRequestParams, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json'}): Observable<any> {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postsIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n\n        let headers = this.defaultHeaders;\n\n        let httpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;\n        if (httpHeaderAcceptSelected === undefined) {\n            // to determine the Accept header\n            const httpHeaderAccepts: string[] = [\n                'application/json'\n            ];\n            httpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);\n        }\n        if (httpHeaderAcceptSelected !== undefined) {\n            headers = headers.set('Accept', httpHeaderAcceptSelected);\n        }\n\n\n        let responseType: 'text' | 'json' = 'json';\n        if(httpHeaderAcceptSelected && httpHeaderAcceptSelected.startsWith('text')) {\n            responseType = 'text';\n        }\n\n        return this.httpClient.get<object>(`${this.configuration.basePath}/posts/${encodeURIComponent(String(_id))}`,\n            {\n                params: queryParameters,\n                responseType: <any>responseType,\n                withCredentials: this.configuration.withCredentials,\n                headers: headers,\n                observe: observe,\n                reportProgress: reportProgress\n            }\n        );\n    }\n\n    public postsIdGetUrl(requestParameters: PostsIdGetRequestParams): string {\n        const _id = requestParameters[\"id\"];\n        if (_id === null || _id === undefined) {\n            throw new Error('Required parameter id was null or undefined when calling postsIdGet.');\n        }\n        const _context = requestParameters[\"context\"];\n        let queryParameters = new HttpParams({encoder: this.encoder});\n        if (_context !== undefined && _context !== null) {\n          queryParameters = this.addToHttpParams(queryParameters,\n            <any>_context, 'context');\n        }\n        const queryString = queryParameters.toString();\n        return `${this.configuration.basePath}/posts/${encodeURIComponent(String(_id))}${queryString ? `?${queryString}` : ''}`;\n    }\n\n}\n","import { createMocks } from '@backbase/foundation-ang/data-http';\nimport { Provider } from '@angular/core';\n\n/**\n* Mocks provider for /wp-json/wp/v2/media/{id} URL pattern\n*/\nexport const DefaultHttpServiceMediaIdGetMocksProvider: Provider = createMocks([{\n        urlPattern: \"/wp-json/wp/v2/media/{id}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n/**\n* Mocks provider for /wp-json/wp/v2/pages/{id} URL pattern\n*/\nexport const DefaultHttpServicePagesIdGetMocksProvider: Provider = createMocks([{\n        urlPattern: \"/wp-json/wp/v2/pages/{id}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n/**\n* Mocks provider for /wp-json/wp/v2/posts/{id} URL pattern\n*/\nexport const DefaultHttpServicePostsIdGetMocksProvider: Provider = createMocks([{\n        urlPattern: \"/wp-json/wp/v2/posts/{id}\",\n        method: \"GET\",\n        responses: [\n    ]\n}]);\n\nexport const DefaultHttpServiceMocksProvider: Provider = createMocks(\n    [\n    {\n        urlPattern: \"/wp-json/wp/v2/media/{id}\",\n        method: \"GET\",\n        responses: [\n\n    ]\n},\n    {\n        urlPattern: \"/wp-json/wp/v2/pages/{id}\",\n        method: \"GET\",\n        responses: [\n\n    ]\n},\n    {\n        urlPattern: \"/wp-json/wp/v2/posts/{id}\",\n        method: \"GET\",\n        responses: [\n\n    ]\n},\n]\n);\n\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}