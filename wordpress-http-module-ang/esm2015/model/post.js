/**
 * Wordpress v2 API
 * Wordpress v2 API
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://github.com/Backbase/backbase-openapi-tools).
 * https://github.com/Backbase/backbase-openapi-tools
 * Do not edit the class manually.
 */
export var Post;
(function (Post) {
    Post.StatusEnum = {
        Publish: 'publish',
        Future: 'future',
        Draft: 'draft',
        Pending: 'pending',
        Private: 'private'
    };
    Post.CommentStatusEnum = {
        Open: 'open',
        Closed: 'closed'
    };
    Post.PingStatusEnum = {
        Open: 'open',
        Closed: 'closed'
    };
    Post.FormatEnum = {
        Standard: 'standard',
        Aside: 'aside',
        Chat: 'chat',
        Gallery: 'gallery',
        Link: 'link',
        Image: 'image',
        Quote: 'quote',
        Status: 'status',
        Video: 'video',
        Audio: 'audio'
    };
})(Post || (Post = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9zdC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvdG9tYXNjb3JyYWwvcHJvamVjdHMvQmFja2Jhc2UvcmVwb3MvcGF5bWVudC1vcmRlci1wcmVzZW50YXRpb24tc3BlYy1iYWNrL3RhcmdldC9nZW5lcmF0ZWQtc291cmNlcy9vcGVuYXBpLyIsInNvdXJjZXMiOlsibW9kZWwvcG9zdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7OztHQVVHO0FBZ0dILE1BQU0sS0FBVyxJQUFJLENBZ0NwQjtBQWhDRCxXQUFpQixJQUFJO0lBRUosZUFBVSxHQUFHO1FBQ3RCLE9BQU8sRUFBRSxTQUF1QjtRQUNoQyxNQUFNLEVBQUUsUUFBc0I7UUFDOUIsS0FBSyxFQUFFLE9BQXFCO1FBQzVCLE9BQU8sRUFBRSxTQUF1QjtRQUNoQyxPQUFPLEVBQUUsU0FBdUI7S0FDbkMsQ0FBQztJQUVXLHNCQUFpQixHQUFHO1FBQzdCLElBQUksRUFBRSxNQUEyQjtRQUNqQyxNQUFNLEVBQUUsUUFBNkI7S0FDeEMsQ0FBQztJQUVXLG1CQUFjLEdBQUc7UUFDMUIsSUFBSSxFQUFFLE1BQXdCO1FBQzlCLE1BQU0sRUFBRSxRQUEwQjtLQUNyQyxDQUFDO0lBRVcsZUFBVSxHQUFHO1FBQ3RCLFFBQVEsRUFBRSxVQUF3QjtRQUNsQyxLQUFLLEVBQUUsT0FBcUI7UUFDNUIsSUFBSSxFQUFFLE1BQW9CO1FBQzFCLE9BQU8sRUFBRSxTQUF1QjtRQUNoQyxJQUFJLEVBQUUsTUFBb0I7UUFDMUIsS0FBSyxFQUFFLE9BQXFCO1FBQzVCLEtBQUssRUFBRSxPQUFxQjtRQUM1QixNQUFNLEVBQUUsUUFBc0I7UUFDOUIsS0FBSyxFQUFFLE9BQXFCO1FBQzVCLEtBQUssRUFBRSxPQUFxQjtLQUMvQixDQUFDO0FBQ04sQ0FBQyxFQWhDZ0IsSUFBSSxLQUFKLElBQUksUUFnQ3BCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXb3JkcHJlc3MgdjIgQVBJXG4gKiBXb3JkcHJlc3MgdjIgQVBJXG4gKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIE9wZW5BUEkgZG9jdW1lbnQ6IDAuMS4wXG4gKiBcbiAqXG4gKiBOT1RFOiBUaGlzIGNsYXNzIGlzIGF1dG8gZ2VuZXJhdGVkIGJ5IE9wZW5BUEkgR2VuZXJhdG9yIChodHRwczovL2dpdGh1Yi5jb20vQmFja2Jhc2UvYmFja2Jhc2Utb3BlbmFwaS10b29scykuXG4gKiBodHRwczovL2dpdGh1Yi5jb20vQmFja2Jhc2UvYmFja2Jhc2Utb3BlbmFwaS10b29sc1xuICogRG8gbm90IGVkaXQgdGhlIGNsYXNzIG1hbnVhbGx5LlxuICovXG5cbmltcG9ydCB7IFBvc3RBbGxPZjEgfSBmcm9tICcuL3Bvc3RBbGxPZjEnO1xuaW1wb3J0IHsgUG9zdEFsbE9mIH0gZnJvbSAnLi9wb3N0QWxsT2YnO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zdCB7IFxuICAgIC8qKlxuICAgICAqIFRoZSBkYXRlIHRoZSBvYmplY3Qgd2FzIHB1Ymxpc2hlZCwgaW4gdGhlIHNpdGVcXCdzIHRpbWV6b25lLlxuICAgICAqL1xuICAgIFtcImRhdGVcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgdGhlIG9iamVjdCB3YXMgcHVibGlzaGVkLCBhcyBHTVQuXG4gICAgICovXG4gICAgW1wiZGF0ZV9nbXRcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGdsb2JhbGx5IHVuaXF1ZSBpZGVudGlmaWVyIGZvciB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFtcImd1aWRcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgW1wiaWRcIl0/OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogVVJMIHRvIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgW1wibGlua1wiXT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgZGF0ZSB0aGUgb2JqZWN0IHdhcyBsYXN0IG1vZGlmaWVkLCBpbiB0aGUgc2l0ZVxcJ3MgdGltZXpvbmUuXG4gICAgICovXG4gICAgW1wibW9kaWZpZWRcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGRhdGUgdGhlIG9iamVjdCB3YXMgbGFzdCBtb2RpZmllZCwgYXMgR01ULlxuICAgICAqL1xuICAgIFtcIm1vZGlmaWVkX2dtdFwiXT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgQSBwYXNzd29yZCB0byBwcm90ZWN0IGFjY2VzcyB0byB0aGUgcG9zdC5cbiAgICAgKi9cbiAgICBbXCJwYXNzd29yZFwiXT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBbiBhbHBoYW51bWVyaWMgaWRlbnRpZmllciBmb3IgdGhlIG9iamVjdCB1bmlxdWUgdG8gaXRzIHR5cGUuXG4gICAgICovXG4gICAgW1wic2x1Z1wiXT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBIG5hbWVkIHN0YXR1cyBmb3IgdGhlIG9iamVjdC5cbiAgICAgKi9cbiAgICBbXCJzdGF0dXNcIl0/OiBQb3N0LlN0YXR1c0VudW07XG4gICAgLyoqXG4gICAgICogVHlwZSBvZiBQb3N0IGZvciB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFtcInR5cGVcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIHRpdGxlIGZvciB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFtcInRpdGxlXCJdPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBjb250ZW50IGZvciB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFtcImNvbnRlbnRcIl0/OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogVGhlIGlkIGZvciB0aGUgYXV0aG9yIG9mIHRoZSBvYmplY3QuXG4gICAgICovXG4gICAgW1wiYXV0aG9yXCJdPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFRoZSBleGNlcnB0IGZvciB0aGUgb2JqZWN0XG4gICAgICovXG4gICAgW1wiZXhjZXJwdFwiXT86IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgaWQgb2YgdGhlIGZlYXR1cmVkIG1lZGlhIGZvciB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFtcImZlYXR1cmVkX21lZGlhXCJdPzogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IGNvbW1lbnRzIGFyZSBvcGVuIG9uIHRoZSBvYmplY3RcbiAgICAgKi9cbiAgICBbXCJjb21tZW50X3N0YXR1c1wiXT86IFBvc3QuQ29tbWVudFN0YXR1c0VudW07XG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIG9iamVjdCBjYW4gYmUgcGluZ2VkLlxuICAgICAqL1xuICAgIFtcInBpbmdfc3RhdHVzXCJdPzogUG9zdC5QaW5nU3RhdHVzRW51bTtcbiAgICAvKipcbiAgICAgKiBUaGUgZm9ybWF0IGZvciB0aGUgb2JqZWN0LlxuICAgICAqL1xuICAgIFtcImZvcm1hdFwiXT86IFBvc3QuRm9ybWF0RW51bTtcbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IHNob3VsZCBiZSB0cmVhdGVkIGFzIHN0aWNreS5cbiAgICAgKi9cbiAgICBbXCJzdGlja3lcIl0/OiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFRoZSB0ZXJtcyBhc3NpZ25lZCB0byB0aGUgb2JqZWN0IGluIHRoZSBjYXRlZ29yeSB0YXhvbm9teS5cbiAgICAgKi9cbiAgICBbXCJjYXRlZ29yaWVzXCJdPzogQXJyYXk8c3RyaW5nPjtcbiAgICAvKipcbiAgICAgKiBoZSB0ZXJtcyBhc3NpZ25lZCB0byB0aGUgb2JqZWN0IGluIHRoZSBwb3N0X3RhZyB0YXhvbm9teS5cbiAgICAgKi9cbiAgICBbXCJ0YWdzXCJdPzogQXJyYXk8c3RyaW5nPjtcbn1cbmV4cG9ydCBuYW1lc3BhY2UgUG9zdCB7XG4gICAgZXhwb3J0IHR5cGUgU3RhdHVzRW51bSA9ICdwdWJsaXNoJyB8ICdmdXR1cmUnIHwgJ2RyYWZ0JyB8ICdwZW5kaW5nJyB8ICdwcml2YXRlJztcbiAgICBleHBvcnQgY29uc3QgU3RhdHVzRW51bSA9IHtcbiAgICAgICAgUHVibGlzaDogJ3B1Ymxpc2gnIGFzIFN0YXR1c0VudW0sXG4gICAgICAgIEZ1dHVyZTogJ2Z1dHVyZScgYXMgU3RhdHVzRW51bSxcbiAgICAgICAgRHJhZnQ6ICdkcmFmdCcgYXMgU3RhdHVzRW51bSxcbiAgICAgICAgUGVuZGluZzogJ3BlbmRpbmcnIGFzIFN0YXR1c0VudW0sXG4gICAgICAgIFByaXZhdGU6ICdwcml2YXRlJyBhcyBTdGF0dXNFbnVtXG4gICAgfTtcbiAgICBleHBvcnQgdHlwZSBDb21tZW50U3RhdHVzRW51bSA9ICdvcGVuJyB8ICdjbG9zZWQnO1xuICAgIGV4cG9ydCBjb25zdCBDb21tZW50U3RhdHVzRW51bSA9IHtcbiAgICAgICAgT3BlbjogJ29wZW4nIGFzIENvbW1lbnRTdGF0dXNFbnVtLFxuICAgICAgICBDbG9zZWQ6ICdjbG9zZWQnIGFzIENvbW1lbnRTdGF0dXNFbnVtXG4gICAgfTtcbiAgICBleHBvcnQgdHlwZSBQaW5nU3RhdHVzRW51bSA9ICdvcGVuJyB8ICdjbG9zZWQnO1xuICAgIGV4cG9ydCBjb25zdCBQaW5nU3RhdHVzRW51bSA9IHtcbiAgICAgICAgT3BlbjogJ29wZW4nIGFzIFBpbmdTdGF0dXNFbnVtLFxuICAgICAgICBDbG9zZWQ6ICdjbG9zZWQnIGFzIFBpbmdTdGF0dXNFbnVtXG4gICAgfTtcbiAgICBleHBvcnQgdHlwZSBGb3JtYXRFbnVtID0gJ3N0YW5kYXJkJyB8ICdhc2lkZScgfCAnY2hhdCcgfCAnZ2FsbGVyeScgfCAnbGluaycgfCAnaW1hZ2UnIHwgJ3F1b3RlJyB8ICdzdGF0dXMnIHwgJ3ZpZGVvJyB8ICdhdWRpbyc7XG4gICAgZXhwb3J0IGNvbnN0IEZvcm1hdEVudW0gPSB7XG4gICAgICAgIFN0YW5kYXJkOiAnc3RhbmRhcmQnIGFzIEZvcm1hdEVudW0sXG4gICAgICAgIEFzaWRlOiAnYXNpZGUnIGFzIEZvcm1hdEVudW0sXG4gICAgICAgIENoYXQ6ICdjaGF0JyBhcyBGb3JtYXRFbnVtLFxuICAgICAgICBHYWxsZXJ5OiAnZ2FsbGVyeScgYXMgRm9ybWF0RW51bSxcbiAgICAgICAgTGluazogJ2xpbmsnIGFzIEZvcm1hdEVudW0sXG4gICAgICAgIEltYWdlOiAnaW1hZ2UnIGFzIEZvcm1hdEVudW0sXG4gICAgICAgIFF1b3RlOiAncXVvdGUnIGFzIEZvcm1hdEVudW0sXG4gICAgICAgIFN0YXR1czogJ3N0YXR1cycgYXMgRm9ybWF0RW51bSxcbiAgICAgICAgVmlkZW86ICd2aWRlbycgYXMgRm9ybWF0RW51bSxcbiAgICAgICAgQXVkaW86ICdhdWRpbycgYXMgRm9ybWF0RW51bVxuICAgIH07XG59XG5cblxuIl19